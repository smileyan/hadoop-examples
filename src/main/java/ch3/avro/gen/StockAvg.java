/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package ch3.avro.gen;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class StockAvg extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8083889139807578474L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"StockAvg\",\"namespace\":\"ch3.avro.gen\",\"fields\":[{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"avg\",\"type\":\"double\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence symbol;
  @Deprecated public double avg;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public StockAvg() {}

  /**
   * All-args constructor.
   * @param symbol The new value for symbol
   * @param avg The new value for avg
   */
  public StockAvg(java.lang.CharSequence symbol, java.lang.Double avg) {
    this.symbol = symbol;
    this.avg = avg;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return symbol;
    case 1: return avg;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: symbol = (java.lang.CharSequence)value$; break;
    case 1: avg = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'symbol' field.
   * @return The value of the 'symbol' field.
   */
  public java.lang.CharSequence getSymbol() {
    return symbol;
  }

  /**
   * Sets the value of the 'symbol' field.
   * @param value the value to set.
   */
  public void setSymbol(java.lang.CharSequence value) {
    this.symbol = value;
  }

  /**
   * Gets the value of the 'avg' field.
   * @return The value of the 'avg' field.
   */
  public java.lang.Double getAvg() {
    return avg;
  }

  /**
   * Sets the value of the 'avg' field.
   * @param value the value to set.
   */
  public void setAvg(java.lang.Double value) {
    this.avg = value;
  }

  /**
   * Creates a new StockAvg RecordBuilder.
   * @return A new StockAvg RecordBuilder
   */
  public static ch3.avro.gen.StockAvg.Builder newBuilder() {
    return new ch3.avro.gen.StockAvg.Builder();
  }

  /**
   * Creates a new StockAvg RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new StockAvg RecordBuilder
   */
  public static ch3.avro.gen.StockAvg.Builder newBuilder(ch3.avro.gen.StockAvg.Builder other) {
    return new ch3.avro.gen.StockAvg.Builder(other);
  }

  /**
   * Creates a new StockAvg RecordBuilder by copying an existing StockAvg instance.
   * @param other The existing instance to copy.
   * @return A new StockAvg RecordBuilder
   */
  public static ch3.avro.gen.StockAvg.Builder newBuilder(ch3.avro.gen.StockAvg other) {
    return new ch3.avro.gen.StockAvg.Builder(other);
  }

  /**
   * RecordBuilder for StockAvg instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<StockAvg>
    implements org.apache.avro.data.RecordBuilder<StockAvg> {

    private java.lang.CharSequence symbol;
    private double avg;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(ch3.avro.gen.StockAvg.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.symbol)) {
        this.symbol = data().deepCopy(fields()[0].schema(), other.symbol);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.avg)) {
        this.avg = data().deepCopy(fields()[1].schema(), other.avg);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing StockAvg instance
     * @param other The existing instance to copy.
     */
    private Builder(ch3.avro.gen.StockAvg other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.symbol)) {
        this.symbol = data().deepCopy(fields()[0].schema(), other.symbol);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.avg)) {
        this.avg = data().deepCopy(fields()[1].schema(), other.avg);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'symbol' field.
      * @return The value.
      */
    public java.lang.CharSequence getSymbol() {
      return symbol;
    }

    /**
      * Sets the value of the 'symbol' field.
      * @param value The value of 'symbol'.
      * @return This builder.
      */
    public ch3.avro.gen.StockAvg.Builder setSymbol(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.symbol = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'symbol' field has been set.
      * @return True if the 'symbol' field has been set, false otherwise.
      */
    public boolean hasSymbol() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'symbol' field.
      * @return This builder.
      */
    public ch3.avro.gen.StockAvg.Builder clearSymbol() {
      symbol = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'avg' field.
      * @return The value.
      */
    public java.lang.Double getAvg() {
      return avg;
    }

    /**
      * Sets the value of the 'avg' field.
      * @param value The value of 'avg'.
      * @return This builder.
      */
    public ch3.avro.gen.StockAvg.Builder setAvg(double value) {
      validate(fields()[1], value);
      this.avg = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'avg' field has been set.
      * @return True if the 'avg' field has been set, false otherwise.
      */
    public boolean hasAvg() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'avg' field.
      * @return This builder.
      */
    public ch3.avro.gen.StockAvg.Builder clearAvg() {
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public StockAvg build() {
      try {
        StockAvg record = new StockAvg();
        record.symbol = fieldSetFlags()[0] ? this.symbol : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.avg = fieldSetFlags()[1] ? this.avg : (java.lang.Double) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
